import logging
import urllib.request
from pymongo import ReturnDocument

from telegram import (ReplyKeyboardMarkup, ReplyKeyboardRemove, Update,
                      InlineKeyboardButton, InlineKeyboardMarkup)
from telegram.ext import (CallbackQueryHandler, CommandHandler, ContextTypes,
                          ConversationHandler, MessageHandler, filters)

from shivu import application, sudo_users, collection, db

# –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
#logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
#                    level=logging.INFO)

#logger = logging.getLogger(__name__)

# C—Ç–∞–Ω–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
SET_IMAGE, SET_NAME, SET_TITLE, SET_EVENT, SET_TAGS, ADD_TO_DATABASE = range(6)

# –°—Ç–∞–Ω–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
SET_FIELD, SET_NEWVALUE, UPDATE_TEXT, UPDATE_TITLE, UPDATE_EVENT, UPDATE_IMAGE = range(6)

# –†—è–¥–∫–∏ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è
message_notice_cannot_use           = "‚ö†Ô∏è –¢–æ–±—ñ –Ω–µ –º–æ–∂–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è —Ü—ñ—î—é –∫–æ–º–∞–Ω–¥–æ—é."
message_notice_cancel_command       = ("‚ö†Ô∏è –ù–∞ –±—É–¥—å-—è–∫–æ–º—É –∫—Ä–æ—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ—é /cancel, "
                                       "—è–∫—â–æ —Ö–æ—á–µ—à —Å–∫–∞—Å—É–≤–∞—Ç–∏ –≤—Å—é –¥—ñ—é.")
message_notice_double_check         = "‚ö†Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ –≤—Å–µ –≤–≤–µ–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —ñ –∑–∞–≤–µ—Ä—à—É–π."
message_notice_action_cancelled     = "‚ö†Ô∏è –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ."

message_error_incorrect_image_url   = ("‚ùåÔ∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É "
                                       "–Ω–∞ —è–∫–∏–π—Å—å —Ö–æ—Å—Ç–∏–Ω–≥ —Ç–∞ –≤—Å—Ç–∞–≤–ª—è–π –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ–¥—Ç–∏.")
message_error_could_not_add_image   = ("‚ùåÔ∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É. –ù–∞–ø–∏—à–∏ –ú–æ–¥–µ—Ä—É —ñ –¥–∞–π –π–æ–º—É "
                                       "—Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏, –∞ —Ç–∞–º –±—É–¥–µ –≤–∏–¥–Ω–æ.")
message_error_could_not_find_image  = "‚ùåÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫—É –∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: "
message_error_field_doesnt_exist    = "‚ùåÔ∏è –¢–∞–∫–æ–≥–æ –ø–æ–ª—è –Ω–µ —ñ—Å–Ω—É—î. –û–±–∏—Ä–∞–π –∑ –∫–Ω–æ–ø–æ–∫!"

message_success_image_added         = "‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö! –¢–µ–ø–µ—Ä –≤–æ–Ω–∞ –º–æ–∂–µ –≤–∏–ø–∞–¥–∞—Ç–∏!"
message_success_image_updated       = "‚úÖ –ó–Ω–∞—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!"

message_at_upload_start             = "–¢–∏ –¥–æ–¥–∞—î—à –∫–∞—Ä—Ç–∏–Ω–∫—É."
message_at_update_start             = "–¢–∏ —Ä–µ–¥–∞–≥—É—î—à –¥–∞–Ω—ñ –∫–∞—Ä—Ç–∏–Ω–∫–∏."
message_at_removal_start            = "–¢–∏ –≤–∏–¥–∞–ª—è—î—à –∫–∞—Ä—Ç–∏–Ω–∫—É."
message_showing_chara_name          = "–í–∫–∞–∑–∞–Ω–µ —ñ–º'—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞/—ñ–≤: "
message_showing_title_name          = "–û–±—Ä–∞–Ω–∞ –Ω–∞–∑–≤–∞ —Ç–∞–π—Ç–ª—É: "
message_showing_event_selected      = "–û–±—Ä–∞–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏: "
message_showing_ID_found            = "–ó–Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∑–∞ –∫–æ–¥–æ–º "
message_showing_current_value       = "–ü–æ—Ç–æ—á–Ω"

message_request_enter_image_url     = "–í–≤–µ–¥–∏ –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É."
message_request_enter_chara_name    = "–í–≤–µ–¥–∏ —ñ–º'—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞/—ñ–≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."
message_request_enter_title_name    = ("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ç–∞–π—Ç–ª—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –ù–∞–∑–≤—É —Ç–∞–π—Ç–ª—É –º–æ–∂–Ω–∞ "
                                       "–≤–≤–µ—Å—Ç–∏ —è–∫ –≤—Ä—É—á–Ω—É, —Ç–∞–∫ —ñ –æ–±—Ä–∞–≤—à–∏ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫.")
message_request_select_event        = "–û–±–µ—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏."
message_request_enter_tags          = ("–í–≤–µ–¥–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–µ“ë–∏ <b>—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª</b>. –¢–µ“ë–∞–º–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏: "
                                       "—Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é, –ø—Ä—ñ–∑–≤–∏—Å—å–∫–∞ —Ç–æ—â–æ.")
message_request_enter_chara_ID      = "–í–≤–µ–¥–∏ –∫–æ–¥ –∫–∞—Ä—Ç–∏–Ω–∫–∏."
message_request_select_field        = "–û–±–µ—Ä–∏, —â–æ —Å–∞–º–µ –±–∞–∂–∞—î—à –≤–∏–ø—Ä–∞–≤–∏—Ç–∏."
message_request_enter_new_value     = "–í–≤–µ–¥–∏ –Ω–æ–≤"

title_name1                         = "–ú–∏–ª–∏–π —É –§—Ä–∞–Ω–∫—Å—ñ"
title_name2                         = "–ú—ñ–π –±—Ä–∞—Ç–∏–∫ –≤–∂–µ –Ω–µ –±—Ä–∞—Ç–∏–∫!"
title_name3                         = "–ú–∞–≥—ñ—á–Ω–∞ –±–∏—Ç–≤–∞"

event_name_common                   = "‚ö™Ô∏è –ó–≤–∏—á–∞–π–Ω–∏–π"
event_name_christmas                = "üéÑ –†—ñ–∑–¥–≤—è–Ω–∏–π"
event_name_summer                   = "üèñÔ∏è –õ—ñ—Ç–Ω—ñ–π"
event_name_halloween                = "üéÉ –ì–µ–ª–æ–≤—ñ–Ω—Å—å–∫–∏–π"

button_ok                           = "‚úÖ –£—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
button_edit                         = "‚ö†Ô∏è –í—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏"

field_name1                         = "–Ü–º'—è"
field_name2                         = "–¢–∞–π—Ç–ª"
field_name3                         = "–¢–µ“ë–∏"
field_name4                         = "–í–∞—Ä—ñ–∞–Ω—Ç"
field_name5                         = "–ö–∞—Ä—Ç–∏–Ω–∫–∞"


###
#
# –î–û–î–ê–í–ê–ù–ù–Ø
#
###

async def upload_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è, –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è."""
    if str(update.effective_user.id) not in sudo_users:
        await update.message.reply_text(message_notice_cannot_use)
        return
    else:
        await update.message.reply_text("<b>" + message_at_upload_start + "</b>\n" + message_notice_cancel_command,
                                        parse_mode='HTML')

        await update.message.reply_text(message_request_enter_image_url,
                                        parse_mode='HTML')

        return SET_IMAGE


async def set_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø–∏—Å –ø–æ—Å–∏–ª–∞–Ω–Ω—è —É –∑–º—ñ–Ω–Ω—É, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –≤–∫–∞–∑—É–≤–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞/–ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤."""
    context.user_data['image_url'] = update.message.text

    try:
        urllib.request.urlopen(context.user_data['image_url'])
    except:
        await update.message.reply_text(message_error_incorrect_image_url)
        return await upload_start(update, context)

    await update.message.reply_text(message_request_enter_chara_name,
                                    parse_mode='HTML')
    return SET_NAME


async def set_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø–∏—Å —ñ–º–µ–Ω—ñ —É –∑–º—ñ–Ω–Ω—É, –≤–∏–±—ñ—Ä —Ç–∞–π—Ç–ª—É."""
    context.user_data['chara_name'] = update.message.text
    entered_character_name = context.user_data['chara_name']

    keyboard_markup = [
        [InlineKeyboardButton(title_name1, callback_data=title_name1)],
        [InlineKeyboardButton(title_name2, callback_data=title_name2)],
        [InlineKeyboardButton(title_name3, callback_data=title_name3)]
    ]
    keyboard = InlineKeyboardMarkup(keyboard_markup)

    await update.message.reply_text("<b>" + message_showing_chara_name + entered_character_name +
                                    "</b>\n\n" + message_request_enter_title_name,
                                    parse_mode='HTML',
                                    reply_markup=keyboard)
    return SET_TITLE


async def set_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø–∏—Å —Ç–∞–π—Ç–ª—É —É –∑–º—ñ–Ω–Ω—É, –≤–∏–±—ñ—Ä –≤–∞—Ä—ñ–∞–Ω—Ç—É."""
    query = update.callback_query
    await query.answer()
    context.user_data['title_name'] = query.data

    keyboard_markup = [
        [InlineKeyboardButton(event_name_common, callback_data=event_name_common)],
        [InlineKeyboardButton(event_name_christmas, callback_data=event_name_christmas)],
        [InlineKeyboardButton(event_name_summer, callback_data=event_name_summer)],
        [InlineKeyboardButton(event_name_halloween, callback_data=event_name_halloween)]
    ]
    keyboard = InlineKeyboardMarkup(keyboard_markup)

    await query.message.reply_text("<b>" + message_showing_title_name + context.user_data['title_name'] +
                                   "</b>\n\n" + message_request_select_event,
                                   parse_mode='HTML',
                                   reply_markup=keyboard)
    return SET_EVENT


async def set_event(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø–∏—Å –≤–∞—Ä—ñ–∞–Ω—Ç—É —É –∑–º—ñ–Ω–Ω—É, –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ“ë—ñ–≤."""
    query = update.callback_query
    await query.answer()
    selected_event = query.data
    context.user_data['event'] = selected_event.split(" ")[0]

    await query.message.reply_text("<b>" + message_showing_event_selected + selected_event +
                                   "</b>\n" + message_request_enter_tags,
                                   parse_mode='HTML')
    return SET_TAGS


async def get_next_sequence_number(sequence_name):
    """–§—É–Ω–∫—Ü—ñ—è –±–æ—Ç–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID."""
    sequence_collection = db.sequences

    sequence_document = await sequence_collection.find_one_and_update(
        {'_id': sequence_name},
        {'$inc': {'sequence_value': 1}},
        return_document=ReturnDocument.AFTER
    )

    if not sequence_document:
        await sequence_collection.insert_one({'_id': sequence_name, 'sequence_value': 0})
        return 0

    return sequence_document['sequence_value']


async def set_tags(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø–∏—Å —Ç–µ“ë—ñ–≤ —É –∑–º—ñ–Ω–Ω—É, –∑–≤—ñ—Ä–µ–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö, –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è."""
    context.user_data['tags'] = update.message.text
    #image_file = get_file(context.user_data['image_url'])

    selections = context.user_data

    message_summary = (message_notice_double_check + "\n\n" +
                       "<b>" + field_name1 + ":</b> " + selections.get('chara_name') + " " + selections.get('event') +
                       "\n<b>" + field_name2 + ":</b> " + selections.get('title_name') + "\n" +
                       "<b>" + field_name3 + ":</b> <i>" + selections.get('tags') + "</i>")

    keyboard_markup = [
        [InlineKeyboardButton(button_ok, callback_data='—Åomplete')]
    ]
    keyboard = InlineKeyboardMarkup(keyboard_markup)

    try:
        await context.bot.send_photo(update.effective_chat.id,
                                     photo=context.user_data['image_url'],
                                     reply_markup=keyboard,
                                     caption=message_summary,
                                     parse_mode='HTML')
    except:
        await update.message.reply_text(message_summary,
                                        parse_mode='HTML',
                                        reply_markup=keyboard)
    return ADD_TO_DATABASE


async def add_to_database(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–∏–±–æ—Ä—É, –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∞–±–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è."""
    query = update.callback_query
    await query.answer()
    decision = query.data

    identifier = str(await get_next_sequence_number('character_id')).zfill(2)

    character = {
        'img_url': context.user_data['image_url'],
        'name': context.user_data['chara_name'],
        'title': context.user_data['title_name'],
        'event': context.user_data['event'],
        'tags': context.user_data['tags'],
    #   'rarity': rarity,
        'id': identifier,
        'message_id': 0
    }

    try:
        await collection.insert_one(character)
        await query.message.reply_text(message_success_image_added,
                                       reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        await update.message.reply_text(message_error_could_not_add_image + "\n\n –ü–æ–º–∏–ª–∫–∞: " + str(e),
                                        parse_mode='HTML')

    return ConversationHandler.END


###
#
# –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø
#
###

async def update_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è, –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è."""
    if str(update.effective_user.id) not in sudo_users:
        await update.message.reply_text(message_notice_cannot_use)
        return
    else:
        await update.message.reply_text("<b>" + message_at_update_start + "</b>\n" + message_notice_cancel_command,
                                        parse_mode='HTML')

        await update.message.reply_text(message_request_enter_chara_ID,
                                        parse_mode='HTML')

        return SET_FIELD


async def set_field(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø–∏—Å —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ —É –∑–º—ñ–Ω–Ω—É, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞, –≤–∏–±—ñ—Ä –ø–æ–ª—è –¥–ª—è –∑–º—ñ–Ω–∏."""
    context.user_data['chat_id'] = update.effective_chat.id
    character = await collection.find_one({'id': update.message.text})

    if not character:
        await update.message.reply_text(message_error_could_not_find_image + update.message.text)
        return await update_start(update, context)
    else:
        keyboard_markup = [
            [
                InlineKeyboardButton(field_name1, callback_data="name"),
                InlineKeyboardButton(field_name2, callback_data="title"),
                InlineKeyboardButton(field_name3, callback_data="tags")
            ],
            [
                InlineKeyboardButton(field_name4, callback_data="event"),
                InlineKeyboardButton(field_name5, callback_data="img_url")
            ]
        ]
        keyboard = InlineKeyboardMarkup(keyboard_markup)

        context.user_data['character'] = character

        await context.bot.send_photo(chat_id=context.user_data['chat_id'],
                                     caption="<b>" + message_showing_ID_found + update.message.text +
                                             "!</b>\n\n" + character['name'] + " " + character['event'] +
                                             "\n" + character['title'] + "\n<b>–¢–µ“ë–∏:</b> " + character['tags'] +
                                             "\n\n" + message_request_select_field,
                                     photo=character['img_url'],
                                     reply_markup=keyboard,
                                     parse_mode='HTML')

    return SET_NEWVALUE


async def set_newvalue(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –æ–±—Ä–∞–Ω–æ–≥–æ –ø–æ–ª—è, –≤–∏–≤–æ–¥–∏—Ç–∏ –ø–µ–≤–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ñ –∑–∞–ø–∏—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è."""
    query = update.callback_query
    await query.answer()
    selected_field = query.data

    context.user_data['selected_field'] = selected_field

    if selected_field == "name":
        await query.message.reply_text("<b>" + message_showing_current_value + "–µ " + field_name1.lower() +
                                        ": " + context.user_data['character'][selected_field] + "</b>\n\n" +
                                        message_request_enter_new_value + "–µ " + field_name1.lower() + ".",
                                        parse_mode='HTML')
        return UPDATE_TEXT

    elif selected_field == "title":
        keyboard_markup = [
            [InlineKeyboardButton(title_name1, callback_data=title_name1)],
            [InlineKeyboardButton(title_name2, callback_data=title_name2)],
            [InlineKeyboardButton(title_name3, callback_data=title_name3)]
        ]
        keyboard = InlineKeyboardMarkup(keyboard_markup)

        await query.message.reply_text("<b>" + message_showing_current_value + "–∏–π " + field_name2.lower() +
                                        ": " + context.user_data['character'][selected_field] + "</b>\n\n" +
                                        message_request_enter_new_value + "–∏–π " + field_name2.lower() + ".",
                                        parse_mode='HTML',
                                        reply_markup=keyboard)
        return UPDATE_TITLE

    elif selected_field == "tags":
        await query.message.reply_text("<b>" + message_showing_current_value + "—ñ " + field_name3.lower() +
                                        ": " + context.user_data['character'][selected_field] + "</b>\n\n" +
                                        message_request_enter_new_value + "—ñ " + field_name3.lower() + ".",
                                        parse_mode='HTML')
        return UPDATE_TEXT

    elif selected_field == "event":
        keyboard_markup = [
            [InlineKeyboardButton(event_name_common, callback_data=event_name_common)],
            [InlineKeyboardButton(event_name_christmas, callback_data=event_name_christmas)],
            [InlineKeyboardButton(event_name_summer, callback_data=event_name_summer)],
            [InlineKeyboardButton(event_name_halloween, callback_data=event_name_halloween)]
        ]
        keyboard = InlineKeyboardMarkup(keyboard_markup)

        await query.message.reply_text("<b>" + message_showing_current_value + "–∏–π " + field_name4.lower() +
                                        ": " + context.user_data['character'][selected_field] + "</b>\n\n" +
                                        message_request_enter_new_value + "–∏–π " + field_name4.lower() + ".",
                                        parse_mode='HTML',
                                        reply_markup=keyboard)
        return UPDATE_EVENT

    elif selected_field == "img_url":
        await query.message.reply_text(message_request_enter_new_value + "–µ –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–æ–≤—É –∫–∞—Ä—Ç–∏–Ω–∫—É.",
                                        parse_mode='HTML')
        return UPDATE_IMAGE
    else:
        await query.message.reply_text(message_error_field_doesnt_exist,
                                        parse_mode='HTML')
        return update_start(update, context)


async def update_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    new_value = update.message.text
    character = context.user_data['character']

    await collection.find_one_and_update({'id': character['id']},
                                         {'$set': {context.user_data['selected_field']: new_value}})

    await update.message.reply_text("<b>" + message_success_image_updated + "</b>",
                                    parse_mode = 'HTML')

    return ConversationHandler.END


async def update_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    new_value = query.data
    character = context.user_data['character']

    await collection.find_one_and_update({'id': character['id']},
                                         {'$set': {context.user_data['selected_field']: new_value}})

    await query.message.reply_text("<b>" + message_success_image_updated + "</b>",
                                    parse_mode = 'HTML')

    return ConversationHandler.END


async def update_event(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    new_value = query.data.split(" ")[0]
    character = context.user_data['character']

    await collection.find_one_and_update({'id': character['id']},
                                         {'$set': {context.user_data['selected_field']: new_value}})

    await query.message.reply_text("<b>" + message_success_image_updated + "</b>",
                                    parse_mode = 'HTML')

    return ConversationHandler.END


async def update_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    new_value = update.message.text
    character = context.user_data['character']

    try:
        urllib.request.urlopen(context.user_data['image_url'])

        await collection.find_one_and_update({'id': character['id']},
                                             {'$set': {context.user_data['selected_field']: new_value}})

        await update.message.reply_text("<b>" + message_success_image_updated + "</b>",
                                        parse_mode='HTML')

        return ConversationHandler.END
    except:
        await update.message.reply_text(message_error_incorrect_image_url)
        return await update_start(update, context)

###
#
# –í–ò–î–ê–õ–ï–ù–ù–Ø
#
###

###
#
# –°–ö–ê–°–£–í–ê–ù–ù–Ø
#
###
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è"""
    await update.message.reply_text(message_notice_action_cancelled,
                                    reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


# –•–µ–Ω–¥–ª–µ—Ä –ø–æ–∫—Ä–æ–∫–æ–≤–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
conversation_handler_adding = ConversationHandler(
    entry_points=[CommandHandler('upload', upload_start)],
    states={
        SET_IMAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_image)],
        SET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_name)],
        SET_TITLE: [CallbackQueryHandler(set_title)],
        SET_EVENT: [CallbackQueryHandler(set_event)],
        SET_TAGS: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_tags)],
        ADD_TO_DATABASE: [CallbackQueryHandler(add_to_database)]
    },
    fallbacks=[CommandHandler('cancel', cancel)]
)

# –•–µ–Ω–¥–ª–µ—Ä –ø–æ–∫—Ä–æ–∫–æ–≤–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
conversation_handler_updating = ConversationHandler(
    entry_points=[CommandHandler('update', update_start)],
    states={
        SET_FIELD: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_field)],
        SET_NEWVALUE: [CallbackQueryHandler(set_newvalue)],
        UPDATE_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, update_text)],
        UPDATE_TITLE: [CallbackQueryHandler(update_event)],
        UPDATE_EVENT: [CallbackQueryHandler(update_event)],
        UPDATE_IMAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, update_image)]
    },
    fallbacks=[CommandHandler('cancel', cancel)]
)

application.add_handler(conversation_handler_adding)
application.add_handler(CommandHandler('upload', upload_start))
application.add_handler(conversation_handler_updating)
application.add_handler(CommandHandler('update', upload_start))
application.run_polling()

